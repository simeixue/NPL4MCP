[
  {
    "name": "initialize_workspace",
    "description": "\nIMPORTANT: Call this first! Initialize the workspace directory for this session.\n\nThis must be called before using any other tools to ensure notebooks are created\nin the correct location. You must provide a FULL ABSOLUTE PATH to your project folder\nwhere notebooks should be stored. Do not use relative paths.\n\nArgs:\n    directory: The FULL ABSOLUTE PATH to set as the workspace (required)\n    \nReturns:\n    Confirmation message with list of any notebooks found\n\nRaises:\n    ValueError: If directory is not provided, doesn't exist, is not a directory, or is a relative path\n",
    "input_schema": {
      "properties": {
        "directory": {
          "title": "Directory",
          "type": "string"
        }
      },
      "required": [
        "directory"
      ],
      "title": "initialize_workspaceArguments",
      "type": "object"
    },
    "annotations": {},
    "implementation": "# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.initialize_workspace\n# lines: 269-320\ndef initialize_workspace(directory: str) -> str:\n    \"\"\"\n    IMPORTANT: Call this first! Initialize the workspace directory for this session.\n    \n    This must be called before using any other tools to ensure notebooks are created\n    in the correct location. You must provide a FULL ABSOLUTE PATH to your project folder\n    where notebooks should be stored. Do not use relative paths.\n    \n    Args:\n        directory: The FULL ABSOLUTE PATH to set as the workspace (required)\n        \n    Returns:\n        Confirmation message with list of any notebooks found\n    \n    Raises:\n        ValueError: If directory is not provided, doesn't exist, is not a directory, or is a relative path\n    \"\"\"\n    global WORKSPACE_DIR, WORKSPACE_INITIALIZED\n    \n    if not directory or not directory.strip():\n        raise ValueError(\"ERROR: You must provide a directory path. Please provide the FULL ABSOLUTE PATH to your project directory where notebook files are located.\")\n    \n    # Convert Unix-style paths to Windows format\n    directory = convert_unix_path(directory)\n    \n    # Check for relative paths\n    if directory in [\".\", \"./\"] or directory.startswith(\"./\") or directory.startswith(\"../\"):\n        raise ValueError(\"ERROR: Relative paths like '.' or './' are not allowed. Please provide the FULL ABSOLUTE PATH to your project directory.\")\n    \n    # Check if directory exists\n    if not os.path.exists(directory):\n        raise ValueError(f\"ERROR: Directory does not exist: {directory}\")\n    \n    # Check if it's a directory\n    if not os.path.isdir(directory):\n        raise ValueError(f\"ERROR: Not a directory: {directory}\")\n    \n    # Set the workspace directory\n    WORKSPACE_DIR = directory\n    WORKSPACE_INITIALIZED = True\n    print(f\"Workspace initialized at: {WORKSPACE_DIR}\")\n    \n    # List the notebooks in the workspace to confirm\n    notebooks = []\n    for path in Path(WORKSPACE_DIR).rglob('*.ipynb'):\n        notebooks.append(os.path.relpath(path, WORKSPACE_DIR))\n    \n    if notebooks:\n        notebook_list = \"\\n- \" + \"\\n- \".join(notebooks)\n        return f\"Workspace initialized at: {WORKSPACE_DIR}\\nNotebooks found:{notebook_list}\"\n    else:\n        return f\"Workspace initialized at: {WORKSPACE_DIR}\\nNo notebooks found.\"\n\n#callee：\n# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.convert_unix_path\n# lines: 46-61\ndef convert_unix_path(path: str) -> str:\n    \"\"\"Convert Unix-style paths like /d/Projects to Windows-style paths (only on Windows).\"\"\"\n    # Only perform conversion on Windows\n    if sys.platform != 'win32':\n        return path\n        \n    import re\n    # Match pattern like /d/Projects/... or /c/Users/...\n    match = re.match(r'^/([a-zA-Z])(/.*)?$', path)\n    if match:\n        drive_letter = match.group(1)\n        remaining_path = match.group(2) or ''\n        # Convert to Windows path (D:\\\\Projects\\\\...)\n        windows_path = remaining_path.replace('/', '\\\\')\n        return f\"{drive_letter.upper()}:{windows_path}\"\n    return path\n"
  },
  {
    "name": "list_notebooks",
    "description": "\nList all notebook files in the specified directory.\n\nNote: You must call initialize_workspace() first.\n",
    "input_schema": {
      "properties": {
        "directory": {
          "default": ".",
          "title": "Directory",
          "type": "string"
        }
      },
      "title": "list_notebooksArguments",
      "type": "object"
    },
    "annotations": {},
    "implementation": "# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.list_notebooks\n# lines: 328-342\ndef list_notebooks(directory: str = \".\") -> List[str]:\n    \"\"\"\n    List all notebook files in the specified directory.\n    \n    Note: You must call initialize_workspace() first.\n    \"\"\"\n    check_workspace_initialized()\n    \n    resolved_directory = resolve_path(directory)\n    notebook_files = []\n    \n    for path in Path(resolved_directory).rglob('*.ipynb'):\n        notebook_files.append(str(path))\n    \n    return notebook_files\n\n#callee：\n# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.check_workspace_initialized\n# lines: 322-325\ndef check_workspace_initialized() -> None:\n    \"\"\"Check if workspace is initialized and raise error if not.\"\"\"\n    if not WORKSPACE_INITIALIZED:\n        raise ValueError(\"ERROR: Workspace not initialized. Please call initialize_workspace() first with the FULL ABSOLUTE PATH to the directory where your notebook files are located.\")\n\n#callee：\n# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.resolve_path\n# lines: 63-73\ndef resolve_path(path: str) -> str:\n    \"\"\"Resolve relative paths against the workspace directory.\"\"\"\n    # Handle Unix-style paths like /d/Projects/...\n    path = convert_unix_path(path)\n    \n    if os.path.isabs(path):\n        return path\n    \n    # Try to resolve against the workspace directory\n    resolved_path = os.path.join(WORKSPACE_DIR, path)\n    return resolved_path\n"
  },
  {
    "name": "create_notebook",
    "description": "\nCreate a new Jupyter notebook.\n\nNote: You must call initialize_workspace() first with your project directory.\n\nArgs:\n    filepath: Path where the notebook should be created\n    title: Title for the notebook (used in the first markdown cell)\n\nReturns:\n    Path to the created notebook\n",
    "input_schema": {
      "properties": {
        "filepath": {
          "title": "Filepath",
          "type": "string"
        },
        "title": {
          "default": "New Notebook",
          "title": "Title",
          "type": "string"
        }
      },
      "required": [
        "filepath"
      ],
      "title": "create_notebookArguments",
      "type": "object"
    },
    "annotations": {},
    "implementation": "# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.create_notebook\n# lines: 345-366\ndef create_notebook(filepath: str, title: str = \"New Notebook\") -> str:\n    \"\"\"\n    Create a new Jupyter notebook.\n    \n    Note: You must call initialize_workspace() first with your project directory.\n    \n    Args:\n        filepath: Path where the notebook should be created\n        title: Title for the notebook (used in the first markdown cell)\n    \n    Returns:\n        Path to the created notebook\n    \"\"\"\n    check_workspace_initialized()\n    \n    resolved_path = resolve_path(filepath)\n    \n    if os.path.exists(resolved_path):\n        return f\"Notebook already exists at {resolved_path}\"\n    \n    create_new_notebook(filepath, title)\n    return f\"Created notebook at {resolved_path}\"\n\n#callee：\n# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.check_workspace_initialized\n# lines: 322-325\ndef check_workspace_initialized() -> None:\n    \"\"\"Check if workspace is initialized and raise error if not.\"\"\"\n    if not WORKSPACE_INITIALIZED:\n        raise ValueError(\"ERROR: Workspace not initialized. Please call initialize_workspace() first with the FULL ABSOLUTE PATH to the directory where your notebook files are located.\")\n\n#callee：\n# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.create_new_notebook\n# lines: 96-115\ndef create_new_notebook(filepath: str, title: str = \"New Notebook\") -> dict:\n    \"\"\"Create a new notebook file if it doesn't exist.\"\"\"\n    resolved_path = resolve_path(filepath)\n    \n    # Create directory if it doesn't exist\n    directory = os.path.dirname(resolved_path)\n    if directory and not os.path.exists(directory):\n        os.makedirs(directory, exist_ok=True)\n    \n    # Create a new notebook\n    nb = new_notebook()\n    nb.cells.append(new_markdown_cell(f\"# {title}\"))\n    nb.cells.append(new_code_cell(\"# Your code here\"))\n    \n    # Write the notebook to file\n    with open(resolved_path, 'w', encoding='utf-8') as f:\n        nbformat.write(nb, f)\n    \n    print(f\"Created new notebook at: {resolved_path}\")\n    return nb\n\n#callee：\n# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.resolve_path\n# lines: 63-73\ndef resolve_path(path: str) -> str:\n    \"\"\"Resolve relative paths against the workspace directory.\"\"\"\n    # Handle Unix-style paths like /d/Projects/...\n    path = convert_unix_path(path)\n    \n    if os.path.isabs(path):\n        return path\n    \n    # Try to resolve against the workspace directory\n    resolved_path = os.path.join(WORKSPACE_DIR, path)\n    return resolved_path\n"
  },
  {
    "name": "read_notebook",
    "description": "\nRead the contents of a notebook.\n\nNote: You must call initialize_workspace() first with your project directory.\n\nArgs:\n    filepath: Path to the notebook file\n\nReturns:\n    The notebook content\n",
    "input_schema": {
      "properties": {
        "filepath": {
          "title": "Filepath",
          "type": "string"
        }
      },
      "required": [
        "filepath"
      ],
      "title": "read_notebookArguments",
      "type": "object"
    },
    "annotations": {},
    "implementation": "# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.read_notebook\n# lines: 369-388\ndef read_notebook(filepath: str) -> Dict:\n    \"\"\"\n    Read the contents of a notebook.\n    \n    Note: You must call initialize_workspace() first with your project directory.\n    \n    Args:\n        filepath: Path to the notebook file\n    \n    Returns:\n        The notebook content\n    \"\"\"\n    check_workspace_initialized()\n    \n    try:\n        nb = get_notebook_content(filepath)\n    except FileNotFoundError:\n        nb = create_new_notebook(filepath)\n    \n    return notebook_to_dict(nb)\n\n#callee：\n# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.check_workspace_initialized\n# lines: 322-325\ndef check_workspace_initialized() -> None:\n    \"\"\"Check if workspace is initialized and raise error if not.\"\"\"\n    if not WORKSPACE_INITIALIZED:\n        raise ValueError(\"ERROR: Workspace not initialized. Please call initialize_workspace() first with the FULL ABSOLUTE PATH to the directory where your notebook files are located.\")\n\n#callee：\n# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.create_new_notebook\n# lines: 96-115\ndef create_new_notebook(filepath: str, title: str = \"New Notebook\") -> dict:\n    \"\"\"Create a new notebook file if it doesn't exist.\"\"\"\n    resolved_path = resolve_path(filepath)\n    \n    # Create directory if it doesn't exist\n    directory = os.path.dirname(resolved_path)\n    if directory and not os.path.exists(directory):\n        os.makedirs(directory, exist_ok=True)\n    \n    # Create a new notebook\n    nb = new_notebook()\n    nb.cells.append(new_markdown_cell(f\"# {title}\"))\n    nb.cells.append(new_code_cell(\"# Your code here\"))\n    \n    # Write the notebook to file\n    with open(resolved_path, 'w', encoding='utf-8') as f:\n        nbformat.write(nb, f)\n    \n    print(f\"Created new notebook at: {resolved_path}\")\n    return nb\n\n#callee：\n# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.get_notebook_content\n# lines: 85-94\ndef get_notebook_content(filepath: str) -> dict:\n    \"\"\"Read a notebook file and return its content.\"\"\"\n    resolved_path = resolve_path(filepath)\n    \n    if not os.path.exists(resolved_path):\n        raise FileNotFoundError(f\"Notebook file not found: {resolved_path}\")\n    \n    with open(resolved_path, 'r', encoding='utf-8') as f:\n        nb = nbformat.read(f, as_version=4)\n    return nb\n\n#callee：\n# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.notebook_to_dict\n# lines: 126-174\ndef notebook_to_dict(nb) -> Dict:\n    \"\"\"Convert notebook object to a safe dictionary representation.\"\"\"\n    result = {\n        \"cells\": [],\n        \"metadata\": dict(nb.metadata),\n        \"nbformat\": nb.nbformat,\n        \"nbformat_minor\": nb.nbformat_minor\n    }\n    \n    for cell in nb.cells:\n        cell_dict = {\n            \"cell_type\": cell.cell_type,\n            \"source\": cell.source,\n            \"metadata\": dict(cell.metadata)\n        }\n        \n        if cell.cell_type == 'code':\n            cell_dict[\"execution_count\"] = cell.execution_count\n            cell_dict[\"outputs\"] = []\n            \n            if hasattr(cell, 'outputs'):\n                for output in cell.outputs:\n                    output_dict = {\"output_type\": output.output_type}\n                    \n                    if output.output_type == 'stream':\n                        output_dict[\"name\"] = output.name\n                        output_dict[\"text\"] = output.text\n                    elif output.output_type in ('execute_result', 'display_data'):\n                        output_dict[\"data\"] = {}\n                        if hasattr(output, 'data'):\n                            for key, value in output.data.items():\n                                if key == 'image/png':\n                                    output_dict[\"data\"][key] = f\"[Base64 encoded image: {len(value)} bytes]\"\n                                else:\n                                    output_dict[\"data\"][key] = value\n                        if hasattr(output, 'metadata'):\n                            output_dict[\"metadata\"] = dict(output.metadata)\n                        if hasattr(output, 'execution_count') and output.output_type == 'execute_result':\n                            output_dict[\"execution_count\"] = output.execution_count\n                    elif output.output_type == 'error':\n                        output_dict[\"ename\"] = output.ename\n                        output_dict[\"evalue\"] = output.evalue\n                        output_dict[\"traceback\"] = output.traceback\n                    \n                    cell_dict[\"outputs\"].append(output_dict)\n        \n        result[\"cells\"].append(cell_dict)\n    \n    return result\n"
  },
  {
    "name": "read_cell",
    "description": "\nRead a specific cell from a notebook.\n\nNote: You must call initialize_workspace() first with your project directory.\n\nArgs:\n    filepath: Path to the notebook file\n    cell_index: Index of the cell to read\n\nReturns:\n    The cell content\n",
    "input_schema": {
      "properties": {
        "filepath": {
          "title": "Filepath",
          "type": "string"
        },
        "cell_index": {
          "title": "Cell Index",
          "type": "integer"
        }
      },
      "required": [
        "filepath",
        "cell_index"
      ],
      "title": "read_cellArguments",
      "type": "object"
    },
    "annotations": {},
    "implementation": "# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.read_cell\n# lines: 391-415\ndef read_cell(filepath: str, cell_index: int) -> Dict:\n    \"\"\"\n    Read a specific cell from a notebook.\n    \n    Note: You must call initialize_workspace() first with your project directory.\n    \n    Args:\n        filepath: Path to the notebook file\n        cell_index: Index of the cell to read\n    \n    Returns:\n        The cell content\n    \"\"\"\n    check_workspace_initialized()\n    \n    try:\n        nb = get_notebook_content(filepath)\n    except FileNotFoundError:\n        nb = create_new_notebook(filepath)\n    \n    if cell_index < 0 or cell_index >= len(nb.cells):\n        raise IndexError(f\"Cell index out of range: {cell_index}, notebook has {len(nb.cells)} cells\")\n    \n    cell = nb.cells[cell_index]\n    return cell_to_dict(cell)\n\n#callee：\n# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.cell_to_dict\n# lines: 176-214\ndef cell_to_dict(cell) -> Dict:\n    \"\"\"Convert cell object to a safe dictionary representation.\"\"\"\n    cell_dict = {\n        \"cell_type\": cell.cell_type,\n        \"source\": cell.source,\n        \"metadata\": dict(cell.metadata)\n    }\n    \n    if cell.cell_type == 'code':\n        cell_dict[\"execution_count\"] = cell.execution_count\n        cell_dict[\"outputs\"] = []\n        \n        if hasattr(cell, 'outputs'):\n            for output in cell.outputs:\n                output_dict = {\"output_type\": output.output_type}\n                \n                if output.output_type == 'stream':\n                    output_dict[\"name\"] = output.name\n                    output_dict[\"text\"] = output.text\n                elif output.output_type in ('execute_result', 'display_data'):\n                    output_dict[\"data\"] = {}\n                    if hasattr(output, 'data'):\n                        for key, value in output.data.items():\n                            if key == 'image/png':\n                                output_dict[\"data\"][key] = f\"[Base64 encoded image: {len(value)} bytes]\"\n                            else:\n                                output_dict[\"data\"][key] = value\n                    if hasattr(output, 'metadata'):\n                        output_dict[\"metadata\"] = dict(output.metadata)\n                    if hasattr(output, 'execution_count') and output.output_type == 'execute_result':\n                        output_dict[\"execution_count\"] = output.execution_count\n                elif output.output_type == 'error':\n                    output_dict[\"ename\"] = output.ename\n                    output_dict[\"evalue\"] = output.evalue\n                    output_dict[\"traceback\"] = output.traceback\n                \n                cell_dict[\"outputs\"].append(output_dict)\n    \n    return cell_dict\n\n#callee：\n# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.check_workspace_initialized\n# lines: 322-325\ndef check_workspace_initialized() -> None:\n    \"\"\"Check if workspace is initialized and raise error if not.\"\"\"\n    if not WORKSPACE_INITIALIZED:\n        raise ValueError(\"ERROR: Workspace not initialized. Please call initialize_workspace() first with the FULL ABSOLUTE PATH to the directory where your notebook files are located.\")\n\n#callee：\n# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.create_new_notebook\n# lines: 96-115\ndef create_new_notebook(filepath: str, title: str = \"New Notebook\") -> dict:\n    \"\"\"Create a new notebook file if it doesn't exist.\"\"\"\n    resolved_path = resolve_path(filepath)\n    \n    # Create directory if it doesn't exist\n    directory = os.path.dirname(resolved_path)\n    if directory and not os.path.exists(directory):\n        os.makedirs(directory, exist_ok=True)\n    \n    # Create a new notebook\n    nb = new_notebook()\n    nb.cells.append(new_markdown_cell(f\"# {title}\"))\n    nb.cells.append(new_code_cell(\"# Your code here\"))\n    \n    # Write the notebook to file\n    with open(resolved_path, 'w', encoding='utf-8') as f:\n        nbformat.write(nb, f)\n    \n    print(f\"Created new notebook at: {resolved_path}\")\n    return nb\n\n#callee：\n# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.get_notebook_content\n# lines: 85-94\ndef get_notebook_content(filepath: str) -> dict:\n    \"\"\"Read a notebook file and return its content.\"\"\"\n    resolved_path = resolve_path(filepath)\n    \n    if not os.path.exists(resolved_path):\n        raise FileNotFoundError(f\"Notebook file not found: {resolved_path}\")\n    \n    with open(resolved_path, 'r', encoding='utf-8') as f:\n        nb = nbformat.read(f, as_version=4)\n    return nb\n"
  },
  {
    "name": "edit_cell",
    "description": "\nEdit a specific cell in a notebook.\n\nNote: You must call initialize_workspace() first with your project directory.\n\nArgs:\n    filepath: Path to the notebook file\n    cell_index: Index of the cell to edit\n    content: New content for the cell\n\nReturns:\n    Confirmation message\n",
    "input_schema": {
      "properties": {
        "filepath": {
          "title": "Filepath",
          "type": "string"
        },
        "cell_index": {
          "title": "Cell Index",
          "type": "integer"
        },
        "content": {
          "title": "Content",
          "type": "string"
        }
      },
      "required": [
        "filepath",
        "cell_index",
        "content"
      ],
      "title": "edit_cellArguments",
      "type": "object"
    },
    "annotations": {},
    "implementation": "# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.edit_cell\n# lines: 418-451\ndef edit_cell(filepath: str, cell_index: int, content: str) -> str:\n    \"\"\"\n    Edit a specific cell in a notebook.\n    \n    Note: You must call initialize_workspace() first with your project directory.\n    \n    Args:\n        filepath: Path to the notebook file\n        cell_index: Index of the cell to edit\n        content: New content for the cell\n    \n    Returns:\n        Confirmation message\n    \"\"\"\n    check_workspace_initialized()\n    \n    try:\n        nb = get_notebook_content(filepath)\n    except FileNotFoundError:\n        nb = create_new_notebook(filepath)\n    \n    if cell_index < 0 or cell_index >= len(nb.cells):\n        raise IndexError(f\"Cell index out of range: {cell_index}, notebook has {len(nb.cells)} cells\")\n    \n    cell = nb.cells[cell_index]\n    cell['source'] = content\n    \n    try:\n        resolved_path = resolve_path(filepath)\n        with open(resolved_path, 'w', encoding='utf-8') as f:\n            nbformat.write(nb, f)\n        return f\"Updated cell {cell_index} in {resolved_path}\"\n    except Exception as e:\n        raise Exception(f\"Failed to update notebook: {str(e)}\")\n\n#callee：\n# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.check_workspace_initialized\n# lines: 322-325\ndef check_workspace_initialized() -> None:\n    \"\"\"Check if workspace is initialized and raise error if not.\"\"\"\n    if not WORKSPACE_INITIALIZED:\n        raise ValueError(\"ERROR: Workspace not initialized. Please call initialize_workspace() first with the FULL ABSOLUTE PATH to the directory where your notebook files are located.\")\n\n#callee：\n# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.create_new_notebook\n# lines: 96-115\ndef create_new_notebook(filepath: str, title: str = \"New Notebook\") -> dict:\n    \"\"\"Create a new notebook file if it doesn't exist.\"\"\"\n    resolved_path = resolve_path(filepath)\n    \n    # Create directory if it doesn't exist\n    directory = os.path.dirname(resolved_path)\n    if directory and not os.path.exists(directory):\n        os.makedirs(directory, exist_ok=True)\n    \n    # Create a new notebook\n    nb = new_notebook()\n    nb.cells.append(new_markdown_cell(f\"# {title}\"))\n    nb.cells.append(new_code_cell(\"# Your code here\"))\n    \n    # Write the notebook to file\n    with open(resolved_path, 'w', encoding='utf-8') as f:\n        nbformat.write(nb, f)\n    \n    print(f\"Created new notebook at: {resolved_path}\")\n    return nb\n\n#callee：\n# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.get_notebook_content\n# lines: 85-94\ndef get_notebook_content(filepath: str) -> dict:\n    \"\"\"Read a notebook file and return its content.\"\"\"\n    resolved_path = resolve_path(filepath)\n    \n    if not os.path.exists(resolved_path):\n        raise FileNotFoundError(f\"Notebook file not found: {resolved_path}\")\n    \n    with open(resolved_path, 'r', encoding='utf-8') as f:\n        nb = nbformat.read(f, as_version=4)\n    return nb\n\n#callee：\n# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.resolve_path\n# lines: 63-73\ndef resolve_path(path: str) -> str:\n    \"\"\"Resolve relative paths against the workspace directory.\"\"\"\n    # Handle Unix-style paths like /d/Projects/...\n    path = convert_unix_path(path)\n    \n    if os.path.isabs(path):\n        return path\n    \n    # Try to resolve against the workspace directory\n    resolved_path = os.path.join(WORKSPACE_DIR, path)\n    return resolved_path\n"
  },
  {
    "name": "read_notebook_outputs",
    "description": "\nRead all outputs from a notebook.\n\nNote: You must call initialize_workspace() first with your project directory.\n\nArgs:\n    filepath: Path to the notebook file\n\nReturns:\n    List of all cell outputs\n",
    "input_schema": {
      "properties": {
        "filepath": {
          "title": "Filepath",
          "type": "string"
        }
      },
      "required": [
        "filepath"
      ],
      "title": "read_notebook_outputsArguments",
      "type": "object"
    },
    "annotations": {},
    "implementation": "# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.read_notebook_outputs\n# lines: 454-487\ndef read_notebook_outputs(filepath: str) -> List[Dict]:\n    \"\"\"\n    Read all outputs from a notebook.\n    \n    Note: You must call initialize_workspace() first with your project directory.\n    \n    Args:\n        filepath: Path to the notebook file\n    \n    Returns:\n        List of all cell outputs\n    \"\"\"\n    check_workspace_initialized()\n    \n    try:\n        nb = get_notebook_content(filepath)\n    except FileNotFoundError:\n        nb = create_new_notebook(filepath)\n        return []  # New notebook has no outputs\n    \n    outputs = []\n    \n    for i, cell in enumerate(nb.cells):\n        if cell.cell_type == 'code' and hasattr(cell, 'outputs') and cell.outputs:\n            cell_outputs = []\n            for output in cell.outputs:\n                cell_outputs.append(process_cell_output(output))\n            \n            outputs.append({\n                'cell_index': i,\n                'outputs': cell_outputs\n            })\n    \n    return outputs\n\n#callee：\n# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.check_workspace_initialized\n# lines: 322-325\ndef check_workspace_initialized() -> None:\n    \"\"\"Check if workspace is initialized and raise error if not.\"\"\"\n    if not WORKSPACE_INITIALIZED:\n        raise ValueError(\"ERROR: Workspace not initialized. Please call initialize_workspace() first with the FULL ABSOLUTE PATH to the directory where your notebook files are located.\")\n\n#callee：\n# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.create_new_notebook\n# lines: 96-115\ndef create_new_notebook(filepath: str, title: str = \"New Notebook\") -> dict:\n    \"\"\"Create a new notebook file if it doesn't exist.\"\"\"\n    resolved_path = resolve_path(filepath)\n    \n    # Create directory if it doesn't exist\n    directory = os.path.dirname(resolved_path)\n    if directory and not os.path.exists(directory):\n        os.makedirs(directory, exist_ok=True)\n    \n    # Create a new notebook\n    nb = new_notebook()\n    nb.cells.append(new_markdown_cell(f\"# {title}\"))\n    nb.cells.append(new_code_cell(\"# Your code here\"))\n    \n    # Write the notebook to file\n    with open(resolved_path, 'w', encoding='utf-8') as f:\n        nbformat.write(nb, f)\n    \n    print(f\"Created new notebook at: {resolved_path}\")\n    return nb\n\n#callee：\n# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.get_notebook_content\n# lines: 85-94\ndef get_notebook_content(filepath: str) -> dict:\n    \"\"\"Read a notebook file and return its content.\"\"\"\n    resolved_path = resolve_path(filepath)\n    \n    if not os.path.exists(resolved_path):\n        raise FileNotFoundError(f\"Notebook file not found: {resolved_path}\")\n    \n    with open(resolved_path, 'r', encoding='utf-8') as f:\n        nb = nbformat.read(f, as_version=4)\n    return nb\n\n#callee：\n# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.process_cell_output\n# lines: 216-265\ndef process_cell_output(output: Any) -> Dict:\n    \"\"\"Process a cell output and convert to a readable format.\"\"\"\n    if output.output_type == 'stream':\n        return {\n            'type': 'stream',\n            'name': output.name,\n            'text': output.text\n        }\n    elif output.output_type == 'execute_result':\n        result = {\n            'type': 'execute_result',\n            'execution_count': output.execution_count,\n            'data': {}\n        }\n        \n        # Handle text/plain\n        if 'text/plain' in output.data:\n            result['data']['text/plain'] = output.data['text/plain']\n        \n        # Handle images\n        if 'image/png' in output.data:\n            image_data = output.data['image/png']\n            result['data']['image/png'] = f\"[Base64 encoded image: {len(image_data)} bytes]\"\n        \n        return result\n    elif output.output_type == 'display_data':\n        result = {\n            'type': 'display_data',\n            'data': {}\n        }\n        \n        # Handle text/plain\n        if 'text/plain' in output.data:\n            result['data']['text/plain'] = output.data['text/plain']\n        \n        # Handle images\n        if 'image/png' in output.data:\n            image_data = output.data['image/png']\n            result['data']['image/png'] = f\"[Base64 encoded image: {len(image_data)} bytes]\"\n        \n        return result\n    elif output.output_type == 'error':\n        return {\n            'type': 'error',\n            'ename': output.ename,\n            'evalue': output.evalue,\n            'traceback': output.traceback\n        }\n    else:\n        return {'type': output.output_type, 'data': str(output)}\n"
  },
  {
    "name": "read_cell_output",
    "description": "\nRead output from a specific cell.\n\nNote: You must call initialize_workspace() first with your project directory.\n\nArgs:\n    filepath: Path to the notebook file\n    cell_index: Index of the cell\n\nReturns:\n    The cell's output\n",
    "input_schema": {
      "properties": {
        "filepath": {
          "title": "Filepath",
          "type": "string"
        },
        "cell_index": {
          "title": "Cell Index",
          "type": "integer"
        }
      },
      "required": [
        "filepath",
        "cell_index"
      ],
      "title": "read_cell_outputArguments",
      "type": "object"
    },
    "annotations": {},
    "implementation": "# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.read_cell_output\n# lines: 490-523\ndef read_cell_output(filepath: str, cell_index: int) -> List[Dict]:\n    \"\"\"\n    Read output from a specific cell.\n    \n    Note: You must call initialize_workspace() first with your project directory.\n    \n    Args:\n        filepath: Path to the notebook file\n        cell_index: Index of the cell\n    \n    Returns:\n        The cell's output\n    \"\"\"\n    check_workspace_initialized()\n    \n    try:\n        nb = get_notebook_content(filepath)\n    except FileNotFoundError:\n        nb = create_new_notebook(filepath)\n        return []  # New notebook has no outputs\n    \n    if cell_index < 0 or cell_index >= len(nb.cells):\n        raise IndexError(f\"Cell index out of range: {cell_index}, notebook has {len(nb.cells)} cells\")\n    \n    cell = nb.cells[cell_index]\n    \n    if cell.cell_type != 'code' or not hasattr(cell, 'outputs') or not cell.outputs:\n        return []\n    \n    outputs = []\n    for output in cell.outputs:\n        outputs.append(process_cell_output(output))\n    \n    return outputs\n\n#callee：\n# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.check_workspace_initialized\n# lines: 322-325\ndef check_workspace_initialized() -> None:\n    \"\"\"Check if workspace is initialized and raise error if not.\"\"\"\n    if not WORKSPACE_INITIALIZED:\n        raise ValueError(\"ERROR: Workspace not initialized. Please call initialize_workspace() first with the FULL ABSOLUTE PATH to the directory where your notebook files are located.\")\n\n#callee：\n# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.create_new_notebook\n# lines: 96-115\ndef create_new_notebook(filepath: str, title: str = \"New Notebook\") -> dict:\n    \"\"\"Create a new notebook file if it doesn't exist.\"\"\"\n    resolved_path = resolve_path(filepath)\n    \n    # Create directory if it doesn't exist\n    directory = os.path.dirname(resolved_path)\n    if directory and not os.path.exists(directory):\n        os.makedirs(directory, exist_ok=True)\n    \n    # Create a new notebook\n    nb = new_notebook()\n    nb.cells.append(new_markdown_cell(f\"# {title}\"))\n    nb.cells.append(new_code_cell(\"# Your code here\"))\n    \n    # Write the notebook to file\n    with open(resolved_path, 'w', encoding='utf-8') as f:\n        nbformat.write(nb, f)\n    \n    print(f\"Created new notebook at: {resolved_path}\")\n    return nb\n\n#callee：\n# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.get_notebook_content\n# lines: 85-94\ndef get_notebook_content(filepath: str) -> dict:\n    \"\"\"Read a notebook file and return its content.\"\"\"\n    resolved_path = resolve_path(filepath)\n    \n    if not os.path.exists(resolved_path):\n        raise FileNotFoundError(f\"Notebook file not found: {resolved_path}\")\n    \n    with open(resolved_path, 'r', encoding='utf-8') as f:\n        nb = nbformat.read(f, as_version=4)\n    return nb\n\n#callee：\n# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.process_cell_output\n# lines: 216-265\ndef process_cell_output(output: Any) -> Dict:\n    \"\"\"Process a cell output and convert to a readable format.\"\"\"\n    if output.output_type == 'stream':\n        return {\n            'type': 'stream',\n            'name': output.name,\n            'text': output.text\n        }\n    elif output.output_type == 'execute_result':\n        result = {\n            'type': 'execute_result',\n            'execution_count': output.execution_count,\n            'data': {}\n        }\n        \n        # Handle text/plain\n        if 'text/plain' in output.data:\n            result['data']['text/plain'] = output.data['text/plain']\n        \n        # Handle images\n        if 'image/png' in output.data:\n            image_data = output.data['image/png']\n            result['data']['image/png'] = f\"[Base64 encoded image: {len(image_data)} bytes]\"\n        \n        return result\n    elif output.output_type == 'display_data':\n        result = {\n            'type': 'display_data',\n            'data': {}\n        }\n        \n        # Handle text/plain\n        if 'text/plain' in output.data:\n            result['data']['text/plain'] = output.data['text/plain']\n        \n        # Handle images\n        if 'image/png' in output.data:\n            image_data = output.data['image/png']\n            result['data']['image/png'] = f\"[Base64 encoded image: {len(image_data)} bytes]\"\n        \n        return result\n    elif output.output_type == 'error':\n        return {\n            'type': 'error',\n            'ename': output.ename,\n            'evalue': output.evalue,\n            'traceback': output.traceback\n        }\n    else:\n        return {'type': output.output_type, 'data': str(output)}\n"
  },
  {
    "name": "add_cell",
    "description": "\nAdd a new cell to a notebook.\n\nNote: You must call initialize_workspace() first with your project directory.\n\nArgs:\n    filepath: Path to the notebook file\n    content: Content for the new cell\n    cell_type: Type of cell ('code' or 'markdown')\n    index: Position to insert the cell (None for append)\n\nReturns:\n    Confirmation message\n",
    "input_schema": {
      "properties": {
        "filepath": {
          "title": "Filepath",
          "type": "string"
        },
        "content": {
          "title": "Content",
          "type": "string"
        },
        "cell_type": {
          "default": "code",
          "title": "Cell Type",
          "type": "string"
        },
        "index": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "title": "Index"
        }
      },
      "required": [
        "filepath",
        "content"
      ],
      "title": "add_cellArguments",
      "type": "object"
    },
    "annotations": {},
    "implementation": "# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.add_cell\n# lines: 526-570\ndef add_cell(filepath: str, content: str, cell_type: str = \"code\", index: Optional[int] = None) -> str:\n    \"\"\"\n    Add a new cell to a notebook.\n    \n    Note: You must call initialize_workspace() first with your project directory.\n    \n    Args:\n        filepath: Path to the notebook file\n        content: Content for the new cell\n        cell_type: Type of cell ('code' or 'markdown')\n        index: Position to insert the cell (None for append)\n    \n    Returns:\n        Confirmation message\n    \"\"\"\n    check_workspace_initialized()\n    \n    try:\n        nb = get_notebook_content(filepath)\n    except FileNotFoundError:\n        nb = create_new_notebook(filepath)\n    \n    if cell_type.lower() == 'code':\n        new_cell = new_code_cell(content)\n    elif cell_type.lower() == 'markdown':\n        new_cell = new_markdown_cell(content)\n    else:\n        raise ValueError(f\"Invalid cell type: {cell_type}. Must be 'code' or 'markdown'\")\n    \n    if index is None:\n        nb.cells.append(new_cell)\n        position = len(nb.cells) - 1\n    else:\n        if index < 0 or index > len(nb.cells):\n            raise IndexError(f\"Cell index out of range: {index}, notebook has {len(nb.cells)} cells\")\n        nb.cells.insert(index, new_cell)\n        position = index\n    \n    try:\n        resolved_path = resolve_path(filepath)\n        with open(resolved_path, 'w', encoding='utf-8') as f:\n            nbformat.write(nb, f)\n        return f\"Added {cell_type} cell at position {position} in {resolved_path}\"\n    except Exception as e:\n        raise Exception(f\"Failed to update notebook: {str(e)}\")\n\n#callee：\n# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.check_workspace_initialized\n# lines: 322-325\ndef check_workspace_initialized() -> None:\n    \"\"\"Check if workspace is initialized and raise error if not.\"\"\"\n    if not WORKSPACE_INITIALIZED:\n        raise ValueError(\"ERROR: Workspace not initialized. Please call initialize_workspace() first with the FULL ABSOLUTE PATH to the directory where your notebook files are located.\")\n\n#callee：\n# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.create_new_notebook\n# lines: 96-115\ndef create_new_notebook(filepath: str, title: str = \"New Notebook\") -> dict:\n    \"\"\"Create a new notebook file if it doesn't exist.\"\"\"\n    resolved_path = resolve_path(filepath)\n    \n    # Create directory if it doesn't exist\n    directory = os.path.dirname(resolved_path)\n    if directory and not os.path.exists(directory):\n        os.makedirs(directory, exist_ok=True)\n    \n    # Create a new notebook\n    nb = new_notebook()\n    nb.cells.append(new_markdown_cell(f\"# {title}\"))\n    nb.cells.append(new_code_cell(\"# Your code here\"))\n    \n    # Write the notebook to file\n    with open(resolved_path, 'w', encoding='utf-8') as f:\n        nbformat.write(nb, f)\n    \n    print(f\"Created new notebook at: {resolved_path}\")\n    return nb\n\n#callee：\n# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.get_notebook_content\n# lines: 85-94\ndef get_notebook_content(filepath: str) -> dict:\n    \"\"\"Read a notebook file and return its content.\"\"\"\n    resolved_path = resolve_path(filepath)\n    \n    if not os.path.exists(resolved_path):\n        raise FileNotFoundError(f\"Notebook file not found: {resolved_path}\")\n    \n    with open(resolved_path, 'r', encoding='utf-8') as f:\n        nb = nbformat.read(f, as_version=4)\n    return nb\n\n#callee：\n# file: /Users/xue/workspace/mcp_project/mcp_server_pyrepos/python-notebook-mcp/server.py\n# module: server\n# qname: server.resolve_path\n# lines: 63-73\ndef resolve_path(path: str) -> str:\n    \"\"\"Resolve relative paths against the workspace directory.\"\"\"\n    # Handle Unix-style paths like /d/Projects/...\n    path = convert_unix_path(path)\n    \n    if os.path.isabs(path):\n        return path\n    \n    # Try to resolve against the workspace directory\n    resolved_path = os.path.join(WORKSPACE_DIR, path)\n    return resolved_path\n"
  }
]